#!/usr/bin/env python3
import sys
import pygame

# collection of the grid data and where x and y is on the map

def collectGridData(screen, height, width, blockSize, info):
	total = info[0]["total"]
	y_count = 0
	for y in range(0, height, blockSize):
		x_count = 0
		for x in range(0, width, blockSize):
			i = 0
			while i < total:
				if info[i]["x"] == x_count and info[i]["y"] == y_count:
					info[i]["grid_x"] = x + int(blockSize)
					info[i]["grid_y"] = y + int(blockSize)
					break
				i += 1
			x_count += 1
		y_count += 1

# keeps track on if there are any ants on the starting position

def no_ants_on_start(moves):
	i = 0
	total = int(moves[0]["total_ants"])
	while i < total:
		j = 0
		while j < len(moves[i]["ant"]):
			if moves[i]["ant"][j] == total:
				last = i
				return (last)
			j += 1
		i += 1

# draws the grid and rooms on the map

def drawGrid(screen, height, width, blockSize, info, start, end, count, moves, last):
	total = info[0]["total"]
	y_count = 0
	for y in range(0, height, blockSize):
		x_count = 0
		for x in range(0, width, blockSize):
			i = 0
			while i < total:
				if info[i]["x"] == x_count and info[i]["y"] == y_count:
					rect = pygame.Rect(x, y, blockSize, blockSize)
					if info[i]["nbr"] == start:
						color = (0, 0, 200)
					elif info[i]["nbr"] == end:
						color = (0, 200, 0)
					else:
						color = (200, 200, 200)
					pygame.draw.rect(screen, color, pygame.Rect(x + int(blockSize), y + int(blockSize), blockSize, blockSize))
					font=pygame.font.SysFont('arial', blockSize)
					if info[i]["nbr"] == "start":
						print_nbr = "s"
					elif info[i]["nbr"] == "end":
						print_nbr = "e"
					else:
						print_nbr = info[i]["nbr"]
					text=font.render(print_nbr, True, (0, 0, 0))
					rect=text.get_rect()
					screen.blit(text, [x + int(blockSize), y + int(blockSize)])
					if info[i]["nbr"] == start and count < last:
						pygame.draw.circle(screen, (0, 0, 0), [info[i]["grid_x"] + int(blockSize) / 2, info[i]["grid_y"] + int(blockSize) / 2], int(blockSize) / 4)
					break
				i += 1
			x_count += 1
		y_count += 1

# checks if anything is blocking horizontally

def check_if_anything_block_x(info, j, k):
	i = 0
	total = info[i]["total"]
	while i < total:
		if info[i]["x"] > info[j]["x"] and info[i]["x"] < info[k]["x"] and info[i]["y"] == info[j]["y"]:
			return (True)
		if info[i]["x"] < info[j]["x"] and info[i]["x"] > info[k]["x"] and info[i]["y"] == info[j]["y"]:
			return (True)
		i += 1
	return (False)

# checks if anything is blocking vertically

def check_if_anything_block_y(info, j, k):
	i = 0
	total = info[i]["total"]
	while i < total:
		if info[i]["y"] > info[j]["y"] and info[i]["y"] < info[k]["y"] and info[i]["x"] == info[j]["x"]:
			return (True)
		if info[i]["y"] < info[j]["y"] and info[i]["y"] > info[k]["y"] and info[i]["x"] == info[j]["x"]:
			return (True)
		i += 1
	return (False)

# draws special connection if other rooms are blocking the path horizontal

def special_connect_draw_y(screen, blockSize, info, i, k):
	if check_if_anything_block_x(info, i, k) == True and info[i]["grid_x"] < info[k]["grid_x"]:
		pygame.draw.line(screen, (100, 100, 100), (info[i]["grid_x"] + int(blockSize / 2), info[i]["grid_y"] + int(blockSize / 2)), (info[i]["grid_x"] + int(blockSize / 2) + int(blockSize), info[i]["grid_y"] + int(blockSize / 2) + int(blockSize)), 20)
		pygame.draw.line(screen, (100, 100, 100), (info[i]["grid_x"] + int(blockSize / 2) + int(blockSize), info[i]["grid_y"] + int(blockSize / 2) + int(blockSize)), (info[k]["grid_x"] + int(blockSize / 2) - int(blockSize), info[k]["grid_y"] + int(blockSize / 2) + int(blockSize)), 20)
		pygame.draw.line(screen, (100, 100, 100), (info[k]["grid_x"] + int(blockSize / 2) - int(blockSize), info[k]["grid_y"] + int(blockSize / 2) + int(blockSize)), (info[k]["grid_x"] + int(blockSize / 2), info[k]["grid_y"] + int(blockSize / 2)), 20)
	elif check_if_anything_block_x(info, i, k) == True and info[i]["grid_x"] > info[k]["grid_x"]:
		pygame.draw.line(screen, (100, 100, 100), (info[i]["grid_x"] + int(blockSize / 2), info[i]["grid_y"] + int(blockSize / 2)), (info[i]["grid_x"] + int(blockSize / 2) - int(blockSize), info[i]["grid_y"] + int(blockSize / 2) - int(blockSize)), 20)
		pygame.draw.line(screen, (100, 100, 100), (info[i]["grid_x"] + int(blockSize / 2) - int(blockSize), info[i]["grid_y"] + int(blockSize / 2) - int(blockSize)), (info[k]["grid_x"] + int(blockSize / 2) + int(blockSize), info[k]["grid_y"] + int(blockSize / 2) - int(blockSize)), 20)
		pygame.draw.line(screen, (100, 100, 100), (info[k]["grid_x"] + int(blockSize / 2) + int(blockSize), info[k]["grid_y"] + int(blockSize / 2) - int(blockSize)), (info[k]["grid_x"] + int(blockSize / 2), info[k]["grid_y"] + int(blockSize / 2)), 20)
	else:
		pygame.draw.line(screen, (100, 100, 100), (info[i]["grid_x"] + int(blockSize / 2), info[i]["grid_y"] + int(blockSize / 2)), (info[k]["grid_x"] + int(blockSize / 2), info[k]["grid_y"] + int(blockSize / 2)), 20)

# draws special connection if other rooms are blocking the path vertically

def special_connect_draw_x(screen, blockSize, info, i, k):
	if check_if_anything_block_y(info, i, k) == True and info[i]["grid_y"] < info[k]["grid_y"]:
		pygame.draw.line(screen, (100, 100, 100), (info[i]["grid_x"] + int(blockSize / 2), info[i]["grid_y"] + int(blockSize / 2)), (info[i]["grid_x"] + int(blockSize / 2) + int(blockSize), info[i]["grid_y"] + int(blockSize / 2) + int(blockSize)), 20)
		pygame.draw.line(screen, (100, 100, 100), (info[i]["grid_x"] + int(blockSize / 2) + int(blockSize), info[i]["grid_y"] + int(blockSize / 2) + int(blockSize)), (info[k]["grid_x"] + int(blockSize / 2) + int(blockSize), info[k]["grid_y"] + int(blockSize / 2) - int(blockSize)), 20)
		pygame.draw.line(screen, (100, 100, 100), (info[k]["grid_x"] + int(blockSize / 2) + int(blockSize), info[k]["grid_y"] + int(blockSize / 2) - int(blockSize)), (info[k]["grid_x"] + int(blockSize / 2), info[k]["grid_y"] + int(blockSize / 2)), 20)
	elif check_if_anything_block_y(info, i, k) == True and info[i]["grid_y"] > info[k]["grid_y"]:
		pygame.draw.line(screen, (100, 100, 100), (info[i]["grid_x"] + int(blockSize / 2), info[i]["grid_y"] + int(blockSize / 2)), (info[i]["grid_x"] + int(blockSize / 2) - int(blockSize), info[i]["grid_y"] + int(blockSize / 2) - int(blockSize)), 20)
		pygame.draw.line(screen, (100, 100, 100), (info[i]["grid_x"] + int(blockSize / 2) - int(blockSize), info[i]["grid_y"] + int(blockSize / 2) - int(blockSize)), (info[k]["grid_x"] + int(blockSize / 2) - int(blockSize), info[k]["grid_y"] + int(blockSize / 2) + int(blockSize)), 20)
		pygame.draw.line(screen, (100, 100, 100), (info[k]["grid_x"] + int(blockSize / 2) - int(blockSize), info[k]["grid_y"] + int(blockSize / 2) + int(blockSize)), (info[k]["grid_x"] + int(blockSize / 2), info[k]["grid_y"] + int(blockSize / 2)), 20)
	else:
		pygame.draw.line(screen, (100, 100, 100), (info[i]["grid_x"] + int(blockSize / 2), info[i]["grid_y"] + int(blockSize / 2)), (info[k]["grid_x"] + int(blockSize / 2), info[k]["grid_y"] + int(blockSize / 2)), 20)

# draws connections between all of the rooms

def drawConnections(screen, height, width, blockSize, info):
	total = info[0]["total"]
	y_count = 0
	for y in range(0, height, blockSize):
		x_count = 0
		for x in range(0, width, blockSize):
			i = 0
			while i < total:
				if info[i]["x"] == x_count and info[i]["y"] == y_count:
					j = 0
					len_of_connect = len(info[i]["connect"])
					while j < len_of_connect:
						k = 0
						while k < total:
							if info[i]["connect"][j] == info[k]["nbr"]:
								if info[i]["grid_y"] == info[k]["grid_y"]:
									special_connect_draw_y(screen, blockSize, info, i, k)
								elif info[i]["grid_x"] == info[k]["grid_x"]:
									special_connect_draw_x(screen, blockSize, info, i, k)
								else:
									pygame.draw.line(screen, (100, 100, 100), (info[i]["grid_x"] + int(blockSize / 2), info[i]["grid_y"] + int(blockSize / 2)), (info[k]["grid_x"] + int(blockSize / 2), info[k]["grid_y"] + int(blockSize / 2)), 20)
							k += 1
						j += 1
					break
				i += 1
			x_count += 1
		y_count += 1

# draws ants on map and makes sure they are different colors for easier tracking

def draw_ant(screen, height, width, blockSize, info, start, end, moves, current_move):
	total = info[0]["total"]
	total_moves = len(moves[current_move]["room"])
	y_count = 0
	for y in range(0, height, blockSize):
		x_count = 0
		for x in range(0, width, blockSize):
			i = 0
			while i < total:
				if info[i]["x"] == x_count and info[i]["y"] == y_count:
					j = 0
					while j < total_moves:
						if moves[current_move]["room"][j] == info[i]["nbr"]:
							if moves[current_move]["ant"][j] % 2 == 0:
								color = (0, 0, 200)
							elif moves[current_move]["ant"][j] % 3 == 0:
								color = (0, 200, 0)
							else:
								color = (200, 0, 0)
							pygame.draw.circle(screen, color, [info[i]["grid_x"] + int(blockSize) / 2, info[i]["grid_y"] + int(blockSize) / 2], int(blockSize) / 4)
						j += 1
					break
				i += 1
			x_count += 1
		y_count += 1

# draws basic bottom text - printing which move we are currently on

def drawText(screen, height, width, blockSize, prev, count, moves):
	font=pygame.font.SysFont('arial', blockSize)
	text=font.render(str(prev + 1) + "/" + str(moves[0]["total"]), True, (0, 0, 0))
	rect=text.get_rect()
	screen.blit(text, [0 + (int(blockSize) / 2), height - int(blockSize)])
	text=font.render(str(count + 1) + "/" + str(moves[0]["total"]), True, (200, 200, 200))
	rect=text.get_rect()
	screen.blit(text, [0 + (int(blockSize) / 2), height - int(blockSize)])

def checkIfRoomExist(info, room):
	i = 0
	while i < info[0]["total"]:
		if info[i]["nbr"] == room:
			return False
		i += 1
	return True

def checkIfDuplicates(listOfElems, moves, ants, info):
	for elem in listOfElems:
		if listOfElems.count(elem) > 1:
			return True
		if ants == True and elem > int(moves[0]["total_ants"]):
			return True
		if ants == False and checkIfRoomExist(info, elem):
			return True
	return False

def ant_moves_twice(moves, screen, height, width, blockSize, init, info):
	i = 0
	while i < moves[0]["total"]:
		if checkIfDuplicates(moves[i]["ant"], moves, True, info) == True:
			font=pygame.font.SysFont('arial', blockSize)
			text=font.render("ERROR: ant error at " + str(i) + "/" + str(moves[i]["total"]), True, (200, 0, 0))
			rect=text.get_rect()
			screen.blit(text, [0 + (int(blockSize) / 2), height - (int(blockSize) * 2)])
			if init == True:
				print ("ERROR")
				print (moves[i])
			return True
		i += 1
	return False

def room_error(moves, screen, height, width, blockSize, init, info):
	i = 0
	while i < moves[0]["total"]:
		if checkIfDuplicates(moves[i]["room"], moves, False, info) == True:
			font=pygame.font.SysFont('arial', blockSize)
			text=font.render("ERROR: room error at " + str(i) + "/" + str(moves[i]["total"]), True, (200, 0, 0))
			rect=text.get_rect()
			screen.blit(text, [0 + (int(blockSize) / 2), height - (int(blockSize) * 2)])
			if init == True:
				print ("ERROR")
				print (moves[i])
			return
		i += 1

def get_number_of_elements(list):
	count = 0
	for element in list:
		count += 1
	return count

def drawErrorCheck(screen, height, width, blockSize, info, moves, init):
	# error if ant moves twice in a round + error if ants doesn't exist
	# error if two ants are in the same room + room doesn't exist
	# error if ant moves from one room to a room it is not connected to
	i = 0
	while i < moves[0]["total"]:
		if get_number_of_elements(moves[i]["ant"]) != get_number_of_elements(moves[i]["room"]):
			font=pygame.font.SysFont('arial', blockSize)
			text=font.render("ERROR: ant and room error " + str(i) + "/" + str(moves[i]["total"]), True, (200, 0, 0))
			rect=text.get_rect()
			screen.blit(text, [0 + (int(blockSize) / 2), height - (int(blockSize) * 2)])
			if init == True:
				print ("ERROR")
				print (moves[i])
			return
		i += 1
	if ant_moves_twice(moves, screen, height, width, blockSize, init, info) == False:
		room_error(moves, screen, height, width, blockSize, init, info)

# makes the map and displays it in a new window

def make_map(start, end, info, moves):
	i = 0
	total = info[i]["total"]
	minX = info[i]["x"]
	maxX = info[i]["x"]
	minY = info[i]["y"]
	maxY = info[i]["y"]
	while i < total:
		print(info[i])
		if info[i]["x"] < minX:
			minX = info[i]["x"]
		if info[i]["x"] > maxX:
			maxX = info[i]["x"]
		if info[i]["y"] < minY:
			minY = info[i]["y"]
		if info[i]["y"] > maxY:
			maxY = info[i]["y"]
		i += 1
	total = moves[0]["total"]
	i = 0
	while i < total:
		print(moves[i])
		i += 1
	black = (0, 0, 0)
	# Define the dimensions of
	# screen object(width,height)
	if maxX > 50 or maxY > 50:
		blockSize = 20 #Set the size of the grid block
	elif maxX > 20 or maxY > 20:
		blockSize = 40
	else:
		blockSize = 60
	window_height = 800
	window_width = 1200
	pygame.init()
	screen = pygame.display.set_mode((window_width, window_height))
	
	# Set the caption of the screen
	pygame.display.set_caption('Lem-in')
	
	# Fill the background colour to the screen
	screen.fill(black)
	pygame.display.update()
	
	# game loop
	count = -1
	prev = 0
	space = False
	space_r = False
	last = no_ants_on_start(moves)
	drawErrorCheck(screen, window_height, window_width, blockSize, info, moves, True)
	while True:
		if count <= -1 and prev != -1:
			collectGridData(screen, window_height, window_width, blockSize, info)
			drawConnections(screen, window_height, window_width, blockSize, info)
			drawGrid(screen, window_height, window_width, blockSize, info, start, end, count, moves, last)
			drawText(screen, window_height, window_width, blockSize, prev, count, moves)
			drawErrorCheck(screen, window_height, window_width, blockSize, info, moves, False)
			prev = -1
		elif count != prev and count < moves[0]["total"] and count > -1:
			drawConnections(screen, window_height, window_width, blockSize, info)
			drawGrid(screen, window_height, window_width, blockSize, info, start, end, count, moves, last)
			draw_ant(screen, window_height, window_width, blockSize, info, start, end, moves, count)
			drawText(screen, window_height, window_width, blockSize, prev, count, moves)
			drawErrorCheck(screen, window_height, window_width, blockSize, info, moves, False)
			prev = count
		if space == True and count < moves[0]["total"]:
			count += 1
			pygame.time.wait(250)
		if space_r == True and count > -1:
			count -= 1
			pygame.time.wait(250)
		if space == True and count == moves[0]["total"]:
			space = False
		if space_r == True and count == -1:
			space_r = False
		for event in pygame.event.get():
			if event.type == pygame.KEYUP:
				if event.key == pygame.K_RIGHT and count < moves[0]["total"]:
					space = False
				if event.key == pygame.K_LEFT and count < moves[0]["total"]:
					space_r = False
			if event.type == pygame.KEYDOWN:
				if event.key == pygame.K_LEFT and count >= 0:
					space = False
					space_r = True
					print("left key was pressed. display previous move...")
				if event.key == pygame.K_RIGHT and count < moves[0]["total"]:
					print("right key was pressed. display next move...")
					space = True
					space_r = False
				if event.key == pygame.K_SPACE and count < moves[0]["total"]:
					if space == False:
						print("space was pressed. auto play started...")
						space = True
					elif space == True:
						print("space was pressed. auto play stopped...")
						space = False
				if event.key == pygame.K_r:
					print("r was pressed. reset to initial state...")
					count = -1
					space = False
				if event.key == pygame.K_ESCAPE:
					print("ESC was pressed. quitting...")
					pygame.quit()
					sys.exit()
			if event.type == pygame.QUIT:
				pygame.quit()
				sys.exit()
		pygame.display.update()

# checks if it is a coordinates line or not

def check_if_coordinates(line):
	i = 0
	count = 0
	if line.count(" ") != 2:
		return (False)
	while i < len(line):
		if line[i] == " ":
			i += 1
		else:
			if i == 0:
				count += 1
			elif line[i - 1] == " ":
				count += 1
			i += 1
	if count != 3:
		return (False)
	return (True)

# checks if it is a valid room from previously

def is_room(line, j, info, total):
	i = 0
	room = line[j:len(line)]
	k = 0
	while i < total:
		while info[i]["nbr"][k] == room[k] and room[k] != " ":
			k += 1
			return (True)
		i += 1
	return (False)

# checks if we are by an ants moving line

def check_if_ants_move(line, ants, info, total):
	i = 0
	l_found = False
	ant_found = False
	room_found = False
	while i < len(line):
		if line[i] == 'L' and l_found == False and ant_found == False and room_found == False:
			i += 1
			l_found = True
		elif line[i].isnumeric() == True and l_found == True and ant_found == False and room_found == False:
			nbr = line[i].partition("-")
			if int(nbr[0]) <= int(ants):
				ant_found = True
			else:
				return (False)
			i += 1
			while line[i].isnumeric() == True and i < len(line):
				i += 1
			if line[i] != '-':
				return (False)
			i += 1
		elif is_room(line, i, info, total) == True and l_found == True and ant_found == True and room_found == False:
			room_found = True
			while i < len(line) and line[i] != ' ':
				i += 1
		elif line[i] == ' ' and l_found == True and ant_found == True and room_found == True:
			l_found = False
			ant_found = False
			room_found = False
			i += 1
		else:
			return (False)
	if len(line) == 0:
		return (False)
	return (True)

# collects information about the moving of the ants and saves it in a dict

def collect_ant_move(line, ants, info, total, moves, k):
	i = 0
	l_found = False
	ant_found = False
	room_found = False
	while i < len(line):
		if line[i] == 'L' and l_found == False and ant_found == False and room_found == False:
			i += 1
			l_found = True
		elif line[i].isnumeric() == True and l_found == True and ant_found == False and room_found == False:
			prev = i
			while line[i].isnumeric() == True and i < len(line):
				i += 1
			nbr = line[prev:i]
			moves[k]["ant"].append(int(nbr))
			if int(nbr) <= int(ants):
				ant_found = True
			else:
				return (False)
			if line[i] != '-':
				return (False)
			i += 1
		elif is_room(line, i, info, total) == True and l_found == True and ant_found == True and room_found == False:
			room_found = True
			j = 0
			room = line[i:len(line)]
			while j < total:
				if room.find(info[j]["nbr"]) == 0:
					moves[k]["room"].append(info[j]["nbr"])
				j += 1
			while i < len(line) and line[i] != ' ':
				i += 1
		elif line[i] == ' ' and l_found == True and ant_found == True and room_found == True:
			l_found = False
			ant_found = False
			room_found = False
			i += 1
		else:
			return (False)
	if len(line) == 0:
		return (False)
	return (True)

# works even if room name contains the character '-'

def check_rooms(info, line, total, last):
	i = 0
	nbr = line[0:last]
	while i < total:
		if info[i]["nbr"] == nbr:
			break
		i += 1
	if i == total:
		temp = line[last:len(line)]
		if (temp.find("-") == 0):
			last += 1
		check_rooms(info, line, total, last + temp.find("-"))
	else:
		info[i]["connect"].append(line[last + 1:len(line)])


# Main loop of collecting all of the information including error checking

def main(argv, argc):
	if argc == 1:
		data=sys.stdin.read().splitlines()
		info = dict()
		moves = dict()
		start = "N"
		end = "N"
		ants = -1
		i = 0
		k = 0
		total = 0
		ants_move = False
		if len(data) != 0:
			for line in data:
				print (line)
				if len(line) == 0:
					ants_move = True
				elif ants_move == False:
					if line.isnumeric() == True and ants == -1:
						ants = line
					elif len(line) > 0 and line[0] == "#":
						if start == "F" or end == "F":
							print ("Error")
						if line == "##start":
							if start == "N":
								start = "F"
							else:
								print ("Error")
						elif line == "##end":
							if end == "N":
								end = "F"
							else:
								print ("Error")
					elif check_if_coordinates(line) == True:
						nbr = line[0:line.find(" ")]
						x = int(line[line.find(" ") + 1:line.rfind(" ")])
						y = int(line[line.rfind(" ") + 1:len(line)])
						total += 1
						if start == "F":
							start = nbr
						if end == "F":
							end = nbr
						info[i] = {"nbr": nbr, "x": x, "y": y, "connect": [], "total": total, "grid_x": 0, "grid_y": 0}
						i += 1
					elif line.count(" ") == 0:
						last = 0
						if (line.find("-") == 0):
							last += 1
						else:
							last = line.find("-")
						check_rooms(info, line, total, last)
				else:
					print("MOVE ANTS")
					moves[k] = {"ant": [], "room": [], "total": 0, "total_ants": ants}
					collect_ant_move(line, ants, info, total, moves, k)
					k += 1
			i = 0
			while i < total:
				info[i]["total"] = total
				i += 1
			i = 0
			while i < k:
				moves[i]["total"] = k
				i += 1
			make_map(start, end, info, moves)
	else:
		print("Usage: ./lem-in < maps/subject3.map | ./visu-hex")

if __name__ == "__main__":
	main(sys.argv, len(sys.argv))
